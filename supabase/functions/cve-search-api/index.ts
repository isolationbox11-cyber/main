// @ts-nocheck
/// <reference types="https://deno.land/x/service_worker@0.1.0/lib.d.ts" />
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { query } = await req.json();
    const nvdApiKey = Deno.env.get("NVD_API_KEY"); // Retrieve the API key from Supabase secrets

    if (!nvdApiKey) {
      throw new Error("NVD_API_KEY not found in environment variables. Please add it to Supabase secrets.");
    }

    if (!query) {
        return new Response(JSON.stringify({ error: "Search query is required." }), {
            headers: { ...corsHeaders, "Content-Type": "application/json" },
            status: 400,
        });
    }

    // Construct the NVD API URL. This is a basic example, you might need to adjust
    // parameters based on NVD API documentation (e.g., for specific CVE IDs vs. keywords).
    // For simplicity, this example assumes searching by CVE ID or a general keyword.
    const nvdApiUrl = `https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${encodeURIComponent(query)}`;
    // If you want to search by keyword in description, you might use:
    // const nvdApiUrl = `https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=${encodeURIComponent(query)}`;

    const apiRes = await fetch(nvdApiUrl, {
      headers: { "apiKey": nvdApiKey }, // NVD API typically uses 'apiKey' header
    });

    if (!apiRes.ok) {
      const errorText = await apiRes.text();
      console.error("NVD API error:", errorText);
      throw new Error(`NVD API request failed with status: ${apiRes.status} - ${errorText}`);
    }

    const data = await apiRes.json();

    // Process NVD response to match your CVEResult interface
    const cveResults = data.vulnerabilities?.map((vuln: any) => ({
      cveId: vuln.cve.id,
      description: vuln.cve.descriptions.find((desc: any) => desc.lang === 'en')?.value || 'No description available.',
      severity: vuln.cve.metrics?.cvssMetricV31?.[0]?.cvssData?.baseSeverity || 'N/A',
      publishedDate: new Date(vuln.cve.published).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),
      link: `https://nvd.nist.gov/vuln/detail/${vuln.cve.id}`,
    })) || [];

    return new Response(JSON.stringify(cveResults), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});