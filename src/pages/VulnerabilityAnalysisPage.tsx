import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Search, ShieldAlert, ExternalLink } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { supabase } from "@/lib/supabase";
import { showError } from "@/utils/toast";
import { Skeleton } from "@/components/ui/skeleton";

interface CVEResult {
    cveId: string;
    description: string;
    severity: string;
    publishedDate: string;
    link: string;
}

const VulnerabilityAnalysisPage = () => {
    const [query, setQuery] = useState("");
    const [submittedQuery, setSubmittedQuery] = useState("");
    const [apiError, setApiError] = useState<string | null>(null);

    const { mutate: searchCve, data: cveResults, isPending: isLoading } = useMutation({
        mutationFn: async (searchQuery: string) => {
            setApiError(null); // Clear previous API errors
            if (!supabase) throw new Error("Supabase client not initialized.");
            
            const { data, error } = await supabase.functions.invoke("cve-search-api", {
                body: { query: searchQuery },
            });

            if (error) throw new Error(error.message);
            if (data.error) throw new Error(data.error);

            return data as CVEResult[];
        },
        onError: (error) => {
            const errorMessage = (error as Error).message;
            showError(`CVE search failed: ${errorMessage}`);
            if (errorMessage.toLowerCase().includes("api key") || errorMessage.toLowerCase().includes("api request failed")) {
                setApiError(errorMessage);
            }
        },
    });

    const handleSearch = (e?: React.FormEvent<HTMLFormElement>) => {
        if (e) e.preventDefault();
        if (!query.trim()) return;
        setSubmittedQuery(query);
        searchCve(query);
    };

    const getSeverityColor = (severity: string) => {
        switch (severity.toLowerCase()) {
            case "critical": return "text-destructive";
            case "high": return "text-red-500";
            case "medium": return "text-yellow-500";
            case "low": return "text-green-500";
            default: return "text-muted-foreground";
        }
    };

    return (
        <div className="space-y-6">
            <Card className="border-primary/50 bg-card/50 backdrop-blur-sm">
                <CardHeader>
                    <CardTitle className="text-2xl text-primary">Vulnerability Analysis (CVE)</CardTitle>
                    <CardDescription>Search for Common Vulnerabilities and Exposures (CVEs).</CardDescription>
                </CardHeader>
                <CardContent>
                    <form onSubmit={handleSearch} className="flex w-full items-center space-x-2">
                        <div className="relative flex-1">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                            <Input
                                type="search"
                                placeholder="Enter CVE ID (e.g., CVE-2021-44228) or keyword..."
                                className="pl-10 bg-background/50"
                                value={query}
                                onChange={(e) => setQuery(e.target.value)}
                            />
                        </div>
                        <Button type="submit" disabled={isLoading} className="bg-primary text-primary-foreground hover:bg-primary/90">
                            {isLoading ? "Searching..." : "Search"}
                        </Button>
                    </form>
                </CardContent>
            </Card>

            {apiError && (
                <Card className="border-destructive/50 bg-destructive/10">
                    <CardHeader className="flex flex-row items-center gap-4">
                        <ShieldAlert className="h-8 w-8 text-destructive" />
                        <div>
                            <CardTitle className="text-destructive">API Key / Service Error</CardTitle>
                            <CardDescription className="text-destructive/80">
                                Your CVE search failed because the server-side API is not correctly configured or accessible.
                            </CardDescription>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <p className="text-sm text-muted-foreground">
                            The server reported: <code className="bg-muted px-1 py-0.5 rounded-sm text-destructive/80">{apiError}</code>
                        </p>
                        <p className="mt-4 text-sm text-muted-foreground">
                            To enable CVE searching, you need to integrate with a real CVE database API (e.g., NVD API). This typically involves:
                        </p>
                        <ul className="list-disc list-inside text-sm text-muted-foreground mt-2 ml-4">
                            <li>Obtaining an API key from a CVE data provider.</li>
                            <li>Adding this key as a secret in your Supabase project (e.g., `NVD_API_KEY`).</li>
                            <li>Updating the `supabase/functions/cve-search-api/index.ts` file with the correct API endpoint and request format for your chosen CVE service.</li>
                        </ul>
                        <Button 
                            variant="destructive" 
                            className="mt-4"
                            onClick={() => window.open('https://supabase.com/dashboard/project/vkzpryeptgasbhbuortc/settings/functions', '_blank')}
                        >
                            Manage Supabase Secrets
                        </Button>
                    </CardContent>
                </Card>
            )}

            {isLoading && !apiError && (
                <div className="space-y-4">
                    {Array.from({ length: 3 }).map((_, index) => (
                        <Card key={index} className="bg-card/50 backdrop-blur-sm">
                            <CardHeader>
                                <Skeleton className="h-6 w-3/4" />
                                <Skeleton className="h-4 w-1/2 mt-2" />
                            </CardHeader>
                            <CardContent>
                                <Skeleton className="h-4 w-full" />
                                <Skeleton className="h-4 w-5/6 mt-2" />
                            </CardContent>
                        </Card>
                    ))}
                </div>
            )}

            {cveResults && !isLoading && !apiError && (
                <div className="space-y-4">
                    {cveResults.length === 0 ? (
                        <Card className="bg-card/50 backdrop-blur-sm">
                            <CardContent className="pt-6">
                                <p className="text-center text-muted-foreground">No CVEs found for "{submittedQuery}".</p>
                            </CardContent>
                        </Card>
                    ) : (
                        <>
                            <div className="text-sm text-muted-foreground">
                                Found {cveResults.length} results for "{submittedQuery}".
                            </div>
                            {cveResults.map((cve, index) => (
                                <Card key={index} className="bg-card/50 backdrop-blur-sm hover:border-primary/50 transition-colors">
                                    <CardHeader>
                                        <CardTitle className="text-lg flex items-center justify-between">
                                            <a href={cve.link} target="_blank" rel="noopener noreferrer" className="hover:underline">
                                                {cve.cveId}
                                            </a>
                                            <span className={`text-sm font-semibold ${getSeverityColor(cve.severity)}`}>
                                                {cve.severity}
                                            </span>
                                        </CardTitle>
                                        <CardDescription className="text-xs pt-1">Published: {cve.publishedDate}</CardDescription>
                                    </CardHeader>
                                    <CardContent>
                                        <p className="text-sm text-muted-foreground">{cve.description}</p>
                                        <Button 
                                            variant="outline" 
                                            size="sm" 
                                            className="mt-4"
                                            onClick={() => window.open(cve.link, '_blank', 'noopener noreferrer')}
                                        >
                                            View Details <ExternalLink className="ml-2 h-4 w-4" />
                                        </Button>
                                    </CardContent>
                                </Card>
                            ))}
                        </>
                    )}
                </div>
            )}
        </div>
    );
};

export default VulnerabilityAnalysisPage;